rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function incomingData() {
      return request.resource.data;
    }
    
    function isValidUserData() {
      let data = incomingData();
      return data.keys().hasAll(['role', 'email', 'createdAt', 'updatedAt']) &&
             data.role is string &&
             data.email is string &&
             data.createdAt is string &&
             data.updatedAt is string;
    }

    // Match users collection
    match /users/{userId} {
      // Allow read if user is authenticated
      allow read: if isAuthenticated();
      
      // Allow create if:
      // 1. User is authenticated
      // 2. The document ID matches their auth ID
      // 3. The data is valid
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && isValidUserData();
      
      // Allow update if:
      // 1. User is authenticated
      // 2. The document ID matches their auth ID
      // 3. Not trying to escalate privileges
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && (!incomingData().diff(resource.data).affectedKeys().hasAny(['role']) || incomingData().role == resource.data.role);
    }

    // Allow admin operations
    match /users/{userId} {
      allow read, write: if isAuthenticated() 
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
